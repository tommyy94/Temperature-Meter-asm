;******************************************************************************;
;   HEADER FILES
;******************************************************************************;
.nolist
.include "data_handling.asm"
.list

;******************************************************************************;
;   HARDWARE INFORMATION
;******************************************************************************;


;******************************************************************************;
;   PORTS AND PINS
;******************************************************************************;


;******************************************************************************;
;   CONSTANTS
;******************************************************************************;
.equ MAX_STRING_SIZE = 16
.equ DEGREE_SIGN = $B2


;******************************************************************************;
;   FIXED + DERIVED CONSTANTS
;******************************************************************************;


;******************************************************************************;
;   REGISTER DEFINITIONS
;******************************************************************************;


;******************************************************************************;
;   SRAM DEFINITIONS
;******************************************************************************;
.dseg
.org $0100
string_to_send:
    .byte MAX_STRING_SIZE ;reserve space to hold data
.cseg


;******************************************************************************;
;   MACROS
;******************************************************************************;
.listmac ;list macros in .lst file


;******************************************************************************;
; MACRO: CELSIUS_FORMULA
; Registers used: r16, r17, r18, r19
; Description: ADC reading => celsius value, result in r17:r16
; formula: celsius = (ADC * 330 * 10 / 1024) - 33
;******************************************************************************
.macro CELSIUS_FORMULA
    ldi r19, HIGH(330)
    ldi r18, LOW(330)
    rcall mpy16u

    movw r16, r18   ;prepare for division
    ldi r19, HIGH(1024)
    ldi r18, LOW(1024)
    rcall div16u
    
    subi r16, 33    ;result is always 8-bit, so only subtract from 1 register
    movw r18, r16   ;result back to param regpair
.endmacro


.exit
